resources:
  - name: u16microbase_dd_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "dry-dock/u16microbase"
      branch: master

  - name: u16microbase_dd_img
    type: image
    integration: shipDH
    versionTemplate:
      sourceName: "drydock/u16microbase"
      versionName: master

  - name: u16baseami_params
    type: params
    version:
      params:
        SOURCE_AMI: "ami-66506c1c"
        VPC_ID: "vpc-266f3241"
        SUBNET_ID: "subnet-6df12f24"
        SECURITY_GROUP_ID: "sg-f634518c"
        REGION: "us-east-1"

  - name: u16_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16
      branch: master

  - name: u16_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16"
    seed:
      versionName: master

  - name: u16all_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16all
      branch: master

  - name: u16all_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16all"
    seed:
      versionName: master

  - name: u16nodall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16nodall
      branch: master

  - name: u16nodall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16nodall"
    seed:
      versionName: master

  - name: u16pytall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16pytall
      branch: master

  - name: u16pytall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16pytall"
    seed:
      versionName: master

  - name: u16javall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16javall
      branch: master

  - name: u16javall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16javall"
    seed:
      versionName: master

  - name: u16cppall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16cppall
      branch: master

  - name: u16cppall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16cppall"
    seed:
      versionName: master

  - name: u16ruball_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16ruball
      branch: master

  - name: u16ruball_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16ruball"
    seed:
      versionName: master

  - name: u16phpall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16phpall
      branch: master

  - name: u16phpall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16phpall"
    seed:
      versionName: master

  - name: u16scaall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16scaall
      branch: master

  - name: u16scaall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16scaall"
    seed:
      versionName: master

  - name: u16cloall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16cloall
      branch: master

  - name: u16cloall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16cloall"
    seed:
      versionName: master

  - name: u16golall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16golall
      branch: master

  - name: u16golall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16golall"
    seed:
      versionName: master

jobs:
  - name: u16microbase_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16microbase_dd_repo
      - IN: u16_dd_img
      - TASK:
          name: u16microbase_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16_dd_img"
                - IMG_OUT: "u16microbase_dd_img"
                - RES_REPO: "u16microbase_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull --no-cache .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16microbase_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"


  - name: u16microbase_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16microbase_dd_repo
        switch: off
      - IN: u16microbase_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16microbase_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16microbase_dd_img"
                - RES_REPO: "u16microbase_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16microbase.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16_dd_repo
      - TASK:
          name: u16_build
          runtime:
            options:
              env:
                - REL_VER: "master"
                - IMG_OUT: "u16_dd_img"
                - RES_REPO: "u16_dd_repo"
          script:
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16all_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16all_dd_repo
      - IN: u16_dd_img
      - TASK:
          name: u16all_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16_dd_img"
                - IMG_OUT: "u16all_dd_img"
                - RES_REPO: "u16all_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16all_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16nodall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16nodall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16nodall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16nodall_dd_img"
                - RES_REPO: "u16nodall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16nodall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16pytall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16pytall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16pytall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16pytall_dd_img"
                - RES_REPO: "u16pytall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16pytall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16javall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16javall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16pytall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16javall_dd_img"
                - RES_REPO: "u16javall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16javall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16cppall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16cppall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16cppall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16cppall_dd_img"
                - RES_REPO: "u16cppall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16cppall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16golall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16golall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16golall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16golall_dd_img"
                - RES_REPO: "u16golall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16golall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16phpall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16phpall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16phpall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16phpall_dd_img"
                - RES_REPO: "u16phpall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16phpall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16cloall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16cloall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16cloall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16cloall_dd_img"
                - RES_REPO: "u16cloall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16cloall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16ruball_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16ruball_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16ruball_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16ruball_dd_img"
                - RES_REPO: "u16ruball_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16ruball_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16scaall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16scaall_dd_repo
      - IN: u16javall_dd_img
      - TASK:
          name: u16scaall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16javall_dd_img"
                - IMG_OUT: "u16scaall_dd_img"
                - RES_REPO: "u16scaall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16scaall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

########

  - name: u16_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16_dd_repo
        switch: off
      - IN: u16_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16_dd_img"
                - RES_REPO: "u16_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16all_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16all_dd_repo
        switch: off
      - IN: u16all_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16all_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16all_dd_img"
                - RES_REPO: "u16all_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16all.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16nodall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16nodall_dd_repo
        switch: off
      - IN: u16nodall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16nodall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16nodall_dd_img"
                - RES_REPO: "u16nodall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16nodall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16pytall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16pytall_dd_repo
        switch: off
      - IN: u16pytall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16pytall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16pytall_dd_img"
                - RES_REPO: "u16pytall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16pytall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16javall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16javall_dd_repo
        switch: off
      - IN: u16javall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16javall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16javall_dd_img"
                - RES_REPO: "u16javall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16javall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16cppall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16cppall_dd_repo
        switch: off
      - IN: u16cppall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16cppall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16cppall_dd_img"
                - RES_REPO: "u16cppall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16cppall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16cloall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16cloall_dd_repo
        switch: off
      - IN: u16cloall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16cloall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16cloall_dd_img"
                - RES_REPO: "u16cloall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16cloall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16golall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16golall_dd_repo
        switch: off
      - IN: u16golall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16golall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16golall_dd_img"
                - RES_REPO: "u16golall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16golall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16scaall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16scaall_dd_repo
        switch: off
      - IN: u16scaall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16scaall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16scaall_dd_img"
                - RES_REPO: "u16scaall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16scaall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16ruball_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16ruball_dd_repo
        switch: off
      - IN: u16ruball_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16ruball_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16ruball_dd_img"
                - RES_REPO: "u16ruball_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16ruball.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16phpall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16phpall_dd_repo
        switch: off
      - IN: u16phpall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16phpall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16phpall_dd_img"
                - RES_REPO: "u16phpall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16phpall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"


######################### GCP U16 Image ##################################
  - name: u16_x86_64_gcp_img_prep
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: trig_gcp_img_prep
      - IN: u16cppall_dd_img
      - IN: u16phpall_dd_img
      - IN: u16ruball_dd_img
      - IN: u16scaall_dd_img
      - IN: u16golall_dd_img
      - IN: u16cloall_dd_img
      - IN: u16pytall_dd_img
      - IN: u16nodall_dd_img
      - IN: u16javall_dd_img
      - IN: node_file_pack
      - IN: buildami_repo
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - IN: shipit_bits_access_cli
        switch: off
      - TASK:
          name: prep_u16_gce_image
          runtime:
            options:
              env:
                - SOURCE_IMAGE_FAMILY: "ubuntu-1604-lts"
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - REL_VER: "master"
                - SSH_USER: "root"
                - ARCHITECTURE: "x86_64"
                - OS: "Ubuntu_16.04"
                - DOCKER_VER: "17.06"
          script:
            - export REL_VER_DASH=${REL_VER//./-}
            - export FAM_NAME=$REL_VER_DASH"-prep-u16-x86-64"
            - S3_FILENAME=$(shipctl get_resource_version_key "node_file_pack" "S3_FILENAME")
            - S3_BUCKET=$(shipctl get_resource_version_key "node_file_pack" "S3_BUCKET")
            - S3_FULL_PATH="$S3_BUCKET""$S3_FILENAME"
            - pushd $(shipctl get_resource_state "buildami_repo")/gcp/x86_64/Ubuntu_16.04/prep
            - aws s3 cp "$S3_FULL_PATH" "node.tar.gz"
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - cp -R ../../../templates/prep/* .
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER" "ARCHITECTURE=$ARCHITECTURE" "OS=$OS" "DOCKER_VER=$DOCKER_VER" "S3_NODE_TAR_URL=$S3_FULL_PATH"
        - shipctl copy_file_to_state images.txt
    on_failure:
      script:
        - cat output.txt

  - name: u16_x86_64_gcp_img_patch
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16_x86_64_gcp_img_prep
      - IN: node_file_pack
      - IN: cexec_file_pack
      - IN: u16reqProc_x8664_build
      - IN: buildami_repo
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - TASK:
          name: patch_u16_gce_image
          runtime:
            options:
              env:
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - SSH_USER: "root"
          script:
            - pushd $(shipctl get_resource_state "buildami_repo")/gcp/x86_64/Ubuntu_16.04/patch
            - cp -R ../../../templates/patch/* .
            - shipctl copy_file_from_resource_state "u16_x86_64_gcp_img_prep" "images.txt" .
            - export SOURCE_IMAGE_FAMILY=$(shipctl get_resource_version_key u16_x86_64_gcp_img_prep IMAGE_FAM_NAME)
            - export REL_VER=$(shipctl get_resource_version_key u16_x86_64_gcp_img_prep REL_VER)
            - export REL_VER_DASH=${REL_VER//./-}
            - export FAM_NAME=$REL_VER_DASH"-patch-u16-x86-64"
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER"
        - shipctl copy_file_to_state images.txt
    on_failure:
      script:
        - cat output.txt

  - name: u16_x86_64_gcp_img_final
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16_x8664_tag
      - IN: u16all_x8664_tag
      - IN: u16nodall_x8664_tag
      - IN: u16pytall_x8664_tag
      - IN: u16javall_x8664_tag
      - IN: u16cppall_x8664_tag
      - IN: u16cloall_x8664_tag
      - IN: u16golall_x8664_tag
      - IN: u16scaall_x8664_tag
      - IN: u16ruball_x8664_tag
      - IN: u16phpall_x8664_tag
      - IN: u16microbase_x8664_tag
      - IN: execTemplates_repo_file_tag
      - IN: node_repo_file_tag
      - IN: cexec_repo_file_tag
      - IN: reqExec_repo_tag
      - IN: reqProc_repo_tag
      - IN: c7repLib_x8664_tag
      - IN: u14repLib_x8664_tag
      - IN: u16repLib_x8664_tag
      - IN: u16repLib_aarch64_tag
      - IN: buildami_repo
        switch: off
      - IN: u16_x86_64_gcp_img_patch
        switch: off
      - IN: prod_release
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - TASK:
          name: final_u16_gce_image
          runtime:
            options:
              env:
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - SSH_USER: "root"
          script:
            - pushd $(shipctl get_resource_state "buildami_repo")/gcp/x86_64/Ubuntu_16.04/final
            - cp -R ../../../templates/final/* .
            - shipctl copy_file_from_resource_state "u16_x86_64_gcp_img_patch" "images.txt" .
            - export REL_VER=$(shipctl get_resource_version_name "prod_release")
            - export IMG_VER=$REL_VER
            - export REL_VER_DASH=${REL_VER//./-}
            - export FAM_NAME=$REL_VER_DASH"-final-u16-x86-64"
            - export SOURCE_IMAGE_FAMILY=$(shipctl get_resource_version_key u16_x86_64_gcp_img_patch IMAGE_FAM_NAME)
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER" "IMG_VER=$IMG_VER"
        - shipctl copy_file_to_state images.txt
    on_failure:
      script:
        - cat output.txt

  - name: u16_x86_64_gcp_img_v634
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    steps:
      - IN: execTemplates_repo_file_tag
      - IN: node_repo_file_tag
      - IN: cexec_repo_file_tag
      - IN: reqExec_repo_tag
      - IN: reqProc_repo_tag
      - IN: c7repLib_x8664_tag
      - IN: u14repLib_x8664_tag
      - IN: u16repLib_x8664_tag
      - IN: u16repLib_aarch64_tag
      - IN: buildami_repo
        switch: off
      - IN: prod_release
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - IN: u16_x86_64_gcp_img_final
        switch: off
      - TASK:
          name: v634_u16_gce_image
          runtime:
            options:
              env:
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - SSH_USER: "root"
                - IMG_VER: "v6.3.4"
          script:
            - pushd $(shipctl get_resource_state "buildami_repo")/gcp/x86_64/Ubuntu_16.04/final
            - cp -R ../../../templates/final/* .
            - shipctl copy_file_from_resource_state "u16_x86_64_gcp_img_final" "images.txt" .
            - export REL_VER=$(shipctl get_resource_version_name "prod_release")
            - export IMG_VER_DASH=${IMG_VER//./-}
            - export FAM_NAME=$IMG_VER_DASH"-final-u16-x86-64"
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER" "IMG_VER=$IMG_VER"
    on_failure:
      script:
        - cat output.txt

  - name: u16baseami_prep
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: buildami_repo
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: u16baseami_params
        switch: off
      - IN: u16cppall_dd_img
      - IN: u16phpall_dd_img
      - IN: u16ruball_dd_img
      - IN: u16scaall_dd_img
      - IN: u16javall_dd_img
      - IN: u16golall_dd_img
      - IN: u16cloall_dd_img
      - IN: u16pytall_dd_img
      - IN: u16nodall_dd_img
      - IN: node_file_pack
      - IN: cexec_file_pack
      - IN: u16reqProc_x8664_build
      - IN: ami_reqKick_repo
      - TASK:
          script:
            - pushd $(shipctl get_resource_state "buildami_repo")
            - cd u16Base
            - ./basePack.sh u16baseami_prep ami_bits_access_cli
            - popd
    on_failure:
      - script: cat $(shipctl get_resource_state buildami_repo)/u16Base/output.txt

  - name: u16baseami_patch
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: buildami_repo
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: u16baseami_params
        switch: off
      - IN: cexec_file_pack
      - IN: node_file_pack
      - IN: u16reqProc_x8664_build
      - IN: ami_reqKick_repo
      - IN: u16baseami_prep
      - TASK:
          script:
            - pushd $(shipctl get_resource_state "buildami_repo")
            - cd u16BasePatch
            - ./basePatchPack.sh u16baseami_patch ami_bits_access_cli u16baseami_prep
            - popd
    on_failure:
      - script: cat $(shipctl get_resource_state buildami_repo)/u16BasePatch/output.txt #TODO change to standard syntax

  - name: u16finalami_prep
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16_x8664_tag
      - IN: u16all_x8664_tag
      - IN: u16nodall_x8664_tag
      - IN: u16pytall_x8664_tag
      - IN: u16javall_x8664_tag
      - IN: u16cppall_x8664_tag
      - IN: u16cloall_x8664_tag
      - IN: u16golall_x8664_tag
      - IN: u16scaall_x8664_tag
      - IN: u16ruball_x8664_tag
      - IN: u16phpall_x8664_tag
      - IN: u16microbase_x8664_tag
      - IN: execTemplates_repo_file_tag
      - IN: node_repo_file_tag
      - IN: cexec_repo_file_tag
      - IN: reqExec_repo_tag
      - IN: reqProc_repo_tag
      - IN: c7repLib_x8664_tag
      - IN: u14repLib_x8664_tag
      - IN: u16repLib_x8664_tag
      - IN: u16repLib_aarch64_tag
      - IN: buildami_repo
        switch: off
      - IN: u16baseami_patch
        switch: off
      - IN: prod_release
        switch: off
      - IN: u16baseami_params
        switch: off
      - IN: ami_bits_access
        switch: off
      - TASK:
          script:
            - pushd $(shipctl get_resource_state "buildami_repo")
            - cd u16Exec
            - ./execPack.sh u16finalami_prep prod_release u16baseami_patch ami_bits_access
            - popd
    on_failure:
      - script: cat $(shipctl get_resource_state buildami_repo)/u16Exec/output.txt

  - name: u16_v634_update
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    steps:
      - IN: buildami_repo
        switch: off
      - IN: prod_release
        switch: off
      - IN: baseami_params
        switch: off
      - IN: ami_bits_access
        switch: off
      - IN: execTemplates_repo_file_tag
      - IN: node_repo_file_tag
      - IN: cexec_repo_file_tag
      - IN: reqExec_repo_tag
      - IN: reqProc_repo_tag
      - IN: c7repLib_x8664_tag
      - IN: u14repLib_x8664_tag
      - IN: u16repLib_x8664_tag
      - IN: u16repLib_aarch64_tag
      - TASK:
          script:
            - pushd $(shipctl get_resource_state "buildami_repo")
            - cd u16Exec
            - ./execPackUpdate.sh u16_v634_update prod_release ami-6158f91c v634 ami_bits_access
            - popd
    on_failure:
      - script: cat /build/IN/buildami_repo/gitRepo/u16Exec/output.txt