resources:
  - name: u16_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16
      branch: master

  - name: u16_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16"
    seed:
      versionName: master

  - name: u16all_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16all
      branch: master

  - name: u16all_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16all"
    seed:
      versionName: master

  - name: u16nodall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16nodall
      branch: master

  - name: u16nodall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16nodall"
    seed:
      versionName: master

  - name: u16pytall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16pytall
      branch: master

  - name: u16pytall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16pytall"
    seed:
      versionName: master

  - name: u16javall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16javall
      branch: master

  - name: u16javall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16javall"
    seed:
      versionName: master

  - name: u16cppall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16cppall
      branch: master

  - name: u16cppall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16cppall"
    seed:
      versionName: master

  - name: u16ruball_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16ruball
      branch: master

  - name: u16ruball_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16ruball"
    seed:
      versionName: master

  - name: u16phpall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16phpall
      branch: master

  - name: u16phpall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16phpall"
    seed:
      versionName: master

  - name: u16scaall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16scaall
      branch: master

  - name: u16scaall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16scaall"
    seed:
      versionName: master

  - name: u16cloall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16cloall
      branch: master

  - name: u16cloall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16cloall"
    seed:
      versionName: master

  - name: u16golall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/u16golall
      branch: master

  - name: u16golall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/u16golall"
    seed:
      versionName: master

jobs:
  - name: u16_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16_dd_repo
      - TASK:
          name: u16_build
          runtime:
            options:
              env:
                - REL_VER: "master"
                - IMG_OUT: "u16_dd_img"
                - RES_REPO: "u16_dd_repo"
          script:
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16all_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16all_dd_repo
      - IN: u16_dd_img
      - TASK:
          name: u16all_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16_dd_img"
                - IMG_OUT: "u16all_dd_img"
                - RES_REPO: "u16all_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16all_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16nodall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16nodall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16nodall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16nodall_dd_img"
                - RES_REPO: "u16nodall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16nodall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16pytall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16pytall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16pytall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16pytall_dd_img"
                - RES_REPO: "u16pytall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16pytall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16javall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16javall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16pytall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16javall_dd_img"
                - RES_REPO: "u16javall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16javall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16cppall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16cppall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16cppall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16cppall_dd_img"
                - RES_REPO: "u16cppall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16cppall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16golall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16golall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16golall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16golall_dd_img"
                - RES_REPO: "u16golall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16golall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16phpall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16phpall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16phpall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16phpall_dd_img"
                - RES_REPO: "u16phpall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16phpall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16cloall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16cloall_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16cloall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16cloall_dd_img"
                - RES_REPO: "u16cloall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16cloall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16ruball_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16ruball_dd_repo
      - IN: u16all_dd_img
      - TASK:
          name: u16ruball_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16all_dd_img"
                - IMG_OUT: "u16ruball_dd_img"
                - RES_REPO: "u16ruball_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16ruball_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16scaall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16scaall_dd_repo
      - IN: u16javall_dd_img
      - TASK:
          name: u16scaall_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16javall_dd_img"
                - IMG_OUT: "u16scaall_dd_img"
                - RES_REPO: "u16scaall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16scaall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

######################### GCP U16 Image ##################################
  - name: u16_x86_64_gcp_img_prep
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: trig_gcp_img_prep
      - IN: u16cppall_dd_img
      - IN: u16phpall_dd_img
      - IN: u16ruball_dd_img
      - IN: u16scaall_dd_img
      - IN: u16golall_dd_img
      - IN: u16cloall_dd_img
      - IN: u16pytall_dd_img
      - IN: u16nodall_dd_img
      - IN: u16javall_dd_img
      - IN: prepami_repo
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - TASK:
          name: prep_u16_gce_image
          runtime:
            options:
              env:
                - SOURCE_IMAGE_FAMILY: "ubuntu-1604-lts"
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - REL_VER: "master"
                - SSH_USER: "root"
          script:
            - pushd $(shipctl get_resource_state "prepami_repo")/gcp/x86_64/Ubuntu_16.04/prep
            - cp -R ../../../templates/prep/* .
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - export REL_VER_DASH=${REL_VER//./-}
            - export FAM_NAME=$REL_VER_DASH"-prep-u16-x86-64"
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER"
        - shipctl copy_file_to_state images.txt
    on_failure:
      script:
        - cat output.txt

  - name: u16_x86_64_gcp_img_patch
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16_x86_64_gcp_img_prep
      - IN: node_sh_repo
      - IN: cexec_sh_repo1
      - IN: u16reqProc_x8664_build
      - IN: prepami_repo
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - TASK:
          name: patch_u16_gce_image
          runtime:
            options:
              env:
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - SSH_USER: "root"
          script:
            - pushd $(shipctl get_resource_state "prepami_repo")/gcp/x86_64/Ubuntu_16.04/patch
            - cp -R ../../../templates/patch/* .
            - shipctl copy_file_from_resource_state "u16_x86_64_gcp_img_prep" "images.txt" .
            - export SOURCE_IMAGE_FAMILY=$(shipctl get_resource_version_key u16_x86_64_gcp_img_prep IMAGE_FAM_NAME)
            - export REL_VER=$(shipctl get_resource_version_key u16_x86_64_gcp_img_prep REL_VER)
            - export REL_VER_DASH=${REL_VER//./-}
            - export FAM_NAME=$REL_VER_DASH"-patch-u16-x86-64"
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER"
        - shipctl copy_file_to_state images.txt
    on_failure:
      script:
        - cat output.txt

  - name: u16_x86_64_gcp_img_final
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u14_x8664_tag
      - IN: u14all_x8664_tag
      - IN: u14nodall_x8664_tag
      - IN: u14pytall_x8664_tag
      - IN: u14javall_x8664_tag
      - IN: u14cppall_x8664_tag
      - IN: u14cloall_x8664_tag
      - IN: u14golall_x8664_tag
      - IN: u14scaall_x8664_tag
      - IN: u14ruball_x8664_tag
      - IN: u14phpall_x8664_tag
      - IN: u14microbase_x8664_tag
      - IN: u16_x8664_tag
      - IN: u16all_x8664_tag
      - IN: u16nodall_x8664_tag
      - IN: u16pytall_x8664_tag
      - IN: u16javall_x8664_tag
      - IN: u16cppall_x8664_tag
      - IN: u16cloall_x8664_tag
      - IN: u16golall_x8664_tag
      - IN: u16scaall_x8664_tag
      - IN: u16ruball_x8664_tag
      - IN: u16phpall_x8664_tag
      - IN: u16microbase_x8664_tag
      - IN: execTemplates_repo_tag
      - IN: node_repo_file_tag
      - IN: cexec_repo_file_tag
      - IN: reqExec_repo_tag
      - IN: reqProc_repo_tag
      - IN: c7repLib_x8664_tag
      - IN: u14repLib_x8664_tag
      - IN: u16repLib_x8664_tag
      - IN: u16repLib_aarch64_tag
      - IN: prepami_repo
        switch: off
      - IN: u16_x86_64_gcp_img_patch
        switch: off
      - IN: prod_release
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - TASK:
          name: final_u16_gce_image
          runtime:
            options:
              env:
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - SSH_USER: "root"
          script:
            - pushd $(shipctl get_resource_state "prepami_repo")/gcp/x86_64/Ubuntu_16.04/final
            - cp -R ../../../templates/final/* .
            - shipctl copy_file_from_resource_state "u16_x86_64_gcp_img_patch" "images.txt" .
            - export REL_VER=$(shipctl get_resource_version_name "prod_release")
            - export IMG_VER=$REL_VER
            - export REL_VER_DASH=${REL_VER//./-}
            - export FAM_NAME=$REL_VER_DASH"-final-u16-x86-64"
            - export SOURCE_IMAGE_FAMILY=$(shipctl get_resource_version_key u16_x86_64_gcp_img_patch IMAGE_FAM_NAME)
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER" "IMG_VER=$IMG_VER"
        - shipctl copy_file_to_state images.txt
    on_failure:
      script:
        - cat output.txt

  - name: u16_x86_64_gcp_img_v634
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    steps:
      - IN: execTemplates_repo_tag
      - IN: node_repo_file_tag
      - IN: cexec_repo_file_tag
      - IN: reqExec_repo_tag
      - IN: reqProc_repo_tag
      - IN: c7repLib_x8664_tag
      - IN: u14repLib_x8664_tag
      - IN: u16repLib_x8664_tag
      - IN: u16repLib_aarch64_tag
      - IN: prepami_repo
        switch: off
      - IN: prod_release
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - IN: u16_x86_64_gcp_img_final
        switch: off
      - TASK:
          name: v634_u16_gce_image
          runtime:
            options:
              env:
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - SSH_USER: "root"
                - IMG_VER: "v6.3.4"
          script:
            - pushd $(shipctl get_resource_state "prepami_repo")/gcp/x86_64/Ubuntu_16.04/final
            - cp -R ../../../templates/final/* .
            - shipctl copy_file_from_resource_state "u16_x86_64_gcp_img_final" "images.txt" .
            - export REL_VER=$(shipctl get_resource_version_name "prod_release")
            - export IMG_VER_DASH=${IMG_VER//./-}
            - export FAM_NAME=$IMG_VER_DASH"-final-u16-x86-64"
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER" "IMG_VER=$IMG_VER"
    on_failure:
      script:
        - cat output.txt