resources:
  - name: c7_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/c7
      branch: master

  - name: c7_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/c7"
    seed:
      versionName: master

  - name: c7all_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/c7all
      branch: master

  - name: c7all_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/c7all"
    seed:
      versionName: master

  - name: c7nodall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/c7nodall
      branch: master

  - name: c7nodall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/c7nodall"
    seed:
      versionName: master

  - name: c7pytall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/c7pytall
      branch: master

  - name: c7pytall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/c7pytall"
    seed:
      versionName: master

  - name: c7javall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/c7javall
      branch: master

  - name: c7javall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/c7javall"
    seed:
      versionName: master

  - name: c7cppall_dd_repo
    type: gitRepo
    integration: avinci_gh
    pointer:
      sourceName: dry-dock/c7cppall
      branch: master

  - name: c7cppall_dd_img
    type: image
    integration: shipDH
    pointer:
      sourceName: "drydock/c7cppall"
    seed:
      versionName: master

jobs:
  - name: c7_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: x86_c07_cus_01
    steps:
      - IN: c7_dd_repo
      - TASK:
          name: c7_build
          runtime:
            options:
              env:
                - REL_VER: "master"
                - IMG_OUT: "c7_dd_img"
                - RES_REPO: "c7_dd_repo"
          script:
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: c7_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: c7all_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: x86_c07_cus_01
    steps:
      - IN: c7all_dd_repo
      - IN: c7_dd_img
      - TASK:
          name: c7all_build
          runtime:
            options:
              env:
                - IMG_BASE: "c7_dd_img"
                - IMG_OUT: "c7all_dd_img"
                - RES_REPO: "c7all_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: c7all_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: c7nodall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: x86_c07_cus_01
    steps:
      - IN: c7nodall_dd_repo
      - IN: c7all_dd_img
      - TASK:
          name: c7nodall_build
          runtime:
            options:
              env:
                - IMG_BASE: "c7all_dd_img"
                - IMG_OUT: "c7nodall_dd_img"
                - RES_REPO: "c7nodall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: c7nodall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: c7pytall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: x86_c07_cus_01
    steps:
      - IN: c7pytall_dd_repo
      - IN: c7all_dd_img
      - TASK:
          name: c7pytall_build
          runtime:
            options:
              env:
                - IMG_BASE: "c7all_dd_img"
                - IMG_OUT: "c7pytall_dd_img"
                - RES_REPO: "c7pytall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: c7pytall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: c7javall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: x86_c07_cus_01
    steps:
      - IN: c7javall_dd_repo
      - IN: c7all_dd_img
      - TASK:
          name: c7pytall_build
          runtime:
            options:
              env:
                - IMG_BASE: "c7all_dd_img"
                - IMG_OUT: "c7javall_dd_img"
                - RES_REPO: "c7javall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: c7javall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: c7cppall_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: x86_c07_cus_01
    steps:
      - IN: c7cppall_dd_repo
      - IN: c7all_dd_img
      - TASK:
          name: c7cppall_build
          runtime:
            options:
              env:
                - IMG_BASE: "c7all_dd_img"
                - IMG_OUT: "c7cppall_dd_img"
                - RES_REPO: "c7cppall_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: c7cppall_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

######################### GCP CentOS 7 Image ##################################
  - name: c7_x86_64_gcp_img_prep
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: trig_gcp_img_prep
      - IN: prepami_repo
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - IN: c7cppall_dd_img
      - IN: c7javall_dd_img
      - IN: c7pytall_dd_img
      - IN: c7nodall_dd_img
        switch: off
      - TASK:
          name: prep_c7_gce_image
          runtime:
            options:
              env:
                - SOURCE_IMAGE_FAMILY: "centos-7"
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - REL_VER: "master"
                - SSH_USER: "centos"
          script:
            - pushd $(shipctl get_resource_state "prepami_repo")/gcp/x86_64/CentOS_7/prep
            - cp -R ../../../templates/prep/* .
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - export REL_VER_DASH=${REL_VER//./-}
            - export FAM_NAME=$REL_VER_DASH"-prep-c7-x86-64"
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER"
        - shipctl copy_file_to_state images.txt
    on_failure:
      script:
        - cat output.txt

  - name: c7_x86_64_gcp_img_patch
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: c7_x86_64_gcp_img_prep
      - IN: node_file_pack
      - IN: cexec_file_pack
      - IN: u16reqProc_x8664_build
      - IN: prepami_repo
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - TASK:
          name: patch_c7_gce_image
          runtime:
            options:
              env:
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - SSH_USER: "centos"
          script:
            - pushd $(shipctl get_resource_state "prepami_repo")/gcp/x86_64/CentOS_7/patch
            - cp -R ../../../templates/patch/* .
            - shipctl copy_file_from_resource_state "c7_x86_64_gcp_img_prep" "images.txt" .
            - export SOURCE_IMAGE_FAMILY=$(shipctl get_resource_version_key c7_x86_64_gcp_img_prep IMAGE_FAM_NAME)
            - export REL_VER=$(shipctl get_resource_version_key c7_x86_64_gcp_img_prep REL_VER)
            - export REL_VER_DASH=${REL_VER//./-}
            - export FAM_NAME=$REL_VER_DASH"-patch-c7-x86-64"
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER"
        - shipctl copy_file_to_state images.txt
    on_failure:
      script:
        - cat output.txt

  - name: c7_x86_64_gcp_img_final
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: c7_x8664_tag
      - IN: c7all_x8664_tag
      - IN: c7nodall_x8664_tag
      - IN: c7pytall_x8664_tag
      - IN: c7javall_x8664_tag
      - IN: c7cppall_x8664_tag
      - IN: execTemplates_repo_tag
      - IN: node_repo_file_tag
      - IN: cexec_repo_file_tag
      - IN: reqExec_repo_tag
      - IN: reqProc_repo_tag
      - IN: c7repLib_x8664_tag
      - IN: u14repLib_x8664_tag
      - IN: u16repLib_x8664_tag
      - IN: u16repLib_aarch64_tag
      - IN: prepami_repo
        switch: off
      - IN: c7_x86_64_gcp_img_patch
        switch: off
      - IN: prod_release
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - TASK:
          name: final_c7_gce_image
          runtime:
            options:
              env:
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - SSH_USER: "centos"
          script:
            - pushd $(shipctl get_resource_state "prepami_repo")/gcp/x86_64/CentOS_7/final
            - cp -R ../../../templates/final/* .
            - shipctl copy_file_from_resource_state "c7_x86_64_gcp_img_patch" "images.txt" .
            - export REL_VER=$(shipctl get_resource_version_name "prod_release")
            - export IMG_VER=$REL_VER
            - export REL_VER_DASH=${REL_VER//./-}
            - export FAM_NAME=$REL_VER_DASH"-final-c7-x86-64"
            - export SOURCE_IMAGE_FAMILY=$(shipctl get_resource_version_key c7_x86_64_gcp_img_patch IMAGE_FAM_NAME)
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER" "IMG_VER=$IMG_VER"
        - shipctl copy_file_to_state images.txt
    on_failure:
      script:
        - cat output.txt

  - name: c7_x86_64_gcp_img_v634
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    steps:
      - IN: execTemplates_repo_tag
      - IN: node_repo_file_tag
      - IN: cexec_repo_file_tag
      - IN: reqExec_repo_tag
      - IN: reqProc_repo_tag
      - IN: c7repLib_x8664_tag
      - IN: u14repLib_x8664_tag
      - IN: u16repLib_x8664_tag
      - IN: u16repLib_aarch64_tag
      - IN: prepami_repo
        switch: off
      - IN: prod_release
        switch: off
      - IN: ship_bits_gcp
        switch: off
      - IN: c7_x86_64_gcp_img_final
        switch: off
      - TASK:
          name: v634_c7_gce_image
          runtime:
            options:
              env:
                - MACHINE_TYPE: "n1-standard-8"
                - REGION: "us-east1"
                - ZONE: "us-east1-b"
                - PROJECT_ID: "ship-bits"
                - SERVICE_ACCOUNT_JSON: "gcp_key.json"
                - SSH_USER: "centos"
                - IMG_VER: "v6.3.4"
          script:
            - pushd $(shipctl get_resource_state "prepami_repo")/gcp/x86_64/CentOS_7/final
            - cp -R ../../../templates/final/* .
            - shipctl copy_file_from_resource_state "c7_x86_64_gcp_img_final" "images.txt" .
            - export REL_VER=$(shipctl get_resource_version_name "prod_release")
            - export IMG_VER_DASH=${IMG_VER//./-}
            - export FAM_NAME=$IMG_VER_DASH"-final-c7-x86-64"
            - echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
            - shipctl replace vars.json
            - packer validate -var-file=vars.json packer.json
            - packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
            - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER" "IMG_VER=$IMG_VER"
    on_failure:
      script:
        - cat output.txt